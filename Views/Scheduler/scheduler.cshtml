@{
    ViewData["Title"] = "Scheduler";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<style>
    .table-active-row,
    .table-active-row td {
        background-color: #d4edda !important; /* soft light green */
        font-weight: 500;
        font-style: italic; /* ✅ makes text italic */
        color: #155724; /* optional: dark green for better contrast */
    }
</style>

<div class="container py-4">

    <!-- 🔹 Header -->
    <div class="sticky-header d-flex justify-content-between align-items-center mb-3">

        <h2 class="mb-0">OPAL - Test Scheduler Dashboard</h2>

        <select id="ClientName" name="ClientName" class="form-select form-select-sm" style="width:160px" required> </select>
       
        <a href="@Url.Action("Index", "Dashboard")" class="btn btn-outline-primary">
            <i class="bi bi-speedometer2"></i> Dashboard
        </a>
    </div>

    <!-- 🔹 Scheduler Form -->
    <form id="scheduleForm" class="d-flex flex-column h-100">
        <div class="card shadow-lg border-0 rounded-4" >
            <div class="card-body d-flex flex-column h-100 p-4">
                <!-- 🔹 Part A (80%) -->
                <div class="row flex-grow-1 mb-3">
                    <!-- Left Side -->
                    <div class="col-md-6 d-flex flex-column gap-3">

                        <div>
                            <label class="form-label fw-semibold">From Date</label>
                            <input type="date" id="FromDate" name="FromDate"
                                   class="form-control datepicker shadow-sm" placeholder="YYYY-MM-DD" />
                        </div>

                        <div>
                            <label class="form-label fw-semibold">To Date</label>
                            <input type="date" id="ToDate" name="ToDate"
                                   class="form-control datepicker shadow-sm" placeholder="YYYY-MM-DD" />
                        </div>

                        <div>
                            <label class="form-label fw-semibold required">Time</label>
                            <input type="time" id="AtTime" name="AtTime" class="form-control shadow-sm" required />
                        </div>

                        <div>
                            <label class="form-label fw-semibold">Day(s) of Week</label>
                            <div id="dayCheckboxes" class="d-flex flex-wrap gap-2">
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" id="dayAll" value="All">
                                    <label class="form-check-label" for="dayAll">All</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input dayOption" type="checkbox" value="Monday" id="dayMon">
                                    <label class="form-check-label" for="dayMon">Monday</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input dayOption" type="checkbox" value="Tuesday" id="dayTue">
                                    <label class="form-check-label" for="dayTue">Tuesday</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input dayOption" type="checkbox" value="Wednesday" id="dayWed">
                                    <label class="form-check-label" for="dayWed">Wednesday</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input dayOption" type="checkbox" value="Thursday" id="dayThu">
                                    <label class="form-check-label" for="dayThu">Thursday</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input dayOption" type="checkbox" value="Friday" id="dayFri">
                                    <label class="form-check-label" for="dayFri">Friday</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input dayOption" type="checkbox" value="Saturday" id="daySat">
                                    <label class="form-check-label" for="daySat">Saturday</label>
                                </div>
                                <div class="form-check">
                                    <input class="form-check-input dayOption" type="checkbox" value="Sunday" id="daySun">
                                    <label class="form-check-label" for="daySun">Sunday</label>
                                </div>
                            </div>
                        </div>

                    </div>

                    <!-- Right Side -->
                    <div class="col-md-6 d-flex flex-column">
                        <label class="form-label fw-semibold required">Tests To Be Run</label>
                        <select id="TestsToBeRun" name="TestsToBeRun" class="form-select shadow-sm flex-grow-1" multiple size="8" required>
                            <option value="All">All</option>
                        </select>
                        <div class="form-text">Hold CTRL (or CMD on Mac) to select multiple tests.</div>
                    </div>
                </div>

                <!-- 🔹 Part B (20%) -->
                <div class="d-flex justify-content-center align-items-center mt-auto gap-3">
                    <button type="button" id="resetBtn" class="btn btn-outline-secondary">
                        <i class="bi bi-x-circle"></i> Reset
                    </button>
                    <button type="button" id="deactivateBtn" class="btn btn-danger" style="display:none;">
                        <i class="bi bi-slash-circle"></i> Deactivate
                    </button>
                    <button type="submit" class="btn btn-success">
                        <i class="bi bi-save"></i> Save Schedule
                    </button>
                </div>
            </div>
        </div>
    </form>

    <!-- 🔹 Schedule Table -->
    <div class="card p-3 mt-4">
        <div id="clientTableSection" class="mt-4" style="display: none;">
            <h5 class="mb-3">Active Schedulers</h5>
            <div class="table-responsive" style="overflow: visible;">
                <table class="table table-bordered table-striped shadow-sm mt-2" id="clientTable" style="table-layout: fixed; width: 100%;">
                    <thead class="table-primary">
                        <tr>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 5%;">Sl.No</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 33%;">Tests To Be Run</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 14%;">From Date</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 14%;">To Date</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 15%;">Days Of Week</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 7%;">Time</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 14%;">Last Run Time</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <!-- Pagination (always below table, no scrolling needed) -->
            <div class="d-flex align-items-center mt-2 border-top pt-2">

                <!-- Pagination Buttons (30%) -->
                <div class="flex-grow-0 flex-shrink-0" style="flex-basis:30%;">
                    <div class="btn-group">
                        <button id="firstPage" class="btn btn-sm btn-outline-secondary">|⯇</button>
                        <button id="prevPage" class="btn btn-sm btn-outline-secondary">⯇</button>
                        <button id="nextPage" class="btn btn-sm btn-outline-secondary">⯈</button>
                        <button id="lastPage" class="btn btn-sm btn-outline-secondary">⯈|</button>
                    </div>
                </div>

                <!-- Page Size (30%) -->
                <div class="text-center flex-grow-0 flex-shrink-0" style="flex-basis:30%;">
                    <label for="pageSize" class="me-1">Page size:</label>
                    <select id="pageSize" class="form-select form-select-sm d-inline-block" style="width: auto;">
                        <option value="5">5</option>
                        <option value="10" selected>10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                    </select>
                </div>

                <!-- Page Info (40%) -->
                <div class="text-end flex-grow-0 flex-shrink-0" style="flex-basis:40%;">
                    <span id="pageInfo" class="mx-2 align-self-center small text-muted"></span>
                </div>

            </div>
        </div>
    </div>

</div>

<div class="modal fade" id="statusModal" tabindex="-1" aria-hidden="true">
    <!-- 🔹 Modal -->
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="statusModalTitle"></h5>
            </div>
            <div class="modal-body" id="statusModalBody"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script>
    let editingId = null; // track current schedule being edited
    const clients = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Clients ?? new List<string>()));

    const ClientName = document.getElementById("ClientName");
    const resetBtn = document.getElementById("resetBtn");
    const deactivateBtn = document.getElementById("deactivateBtn");
    const testsDropdown = document.getElementById("TestsToBeRun");
    const tableSection = document.getElementById("clientTableSection");
    const tableBody = document.querySelector("#clientTable tbody");
    const dayAllCheckbox = document.getElementById("dayAll");
    const dayOptions = document.querySelectorAll(".dayOption");

    // 🔹 Initialize flatpickr
    flatpickr("#AtTime", {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        time_24hr: true,
        onOpen: function (selectedDates, dateStr, instance) {
            const now = new Date();
            instance.setDate(now, false); // sets the picker to current time without changing input yet
        }
    });
    flatpickr(".datepicker", {
        dateFormat: "Y-m-d",
        minDate: "today" // <-- prevents past dates from being clickable
    });
    // 🔹 Reset form
    function resetForm() {
        editingId = null;

        // Reset tests dropdown
        Array.from(testsDropdown.options).forEach(opt => opt.selected = false);

        // Reset dates to today
        const today = new Date();
        const yyyy = today.getFullYear();
        const mm = String(today.getMonth() + 1).padStart(2, "0");
        const dd = String(today.getDate()).padStart(2, "0");
        const todayStr = `${yyyy}-${mm}-${dd}`;
        document.getElementById("FromDate").value = todayStr;
        document.getElementById("ToDate").value = todayStr;

        // Reset time to current
        const hh = String(today.getHours()).padStart(2, "0");
        const min = String(today.getMinutes()).padStart(2, "0");
        document.getElementById("AtTime").value = `${hh}:${min}`;

        // Reset Day checkboxes
        dayAllCheckbox.checked = false;
        dayOptions.forEach(opt => { opt.checked = false; opt.disabled = false; });

        // Hide deactivate button
        deactivateBtn.style.display = "none";

        // Remove row highlights
        Array.from(tableBody.querySelectorAll("tr")).forEach(r => r.classList.remove("table-active-row"));
    }

    // 🔹 Load clients into dropdown
    async function loadClients() {
        const select = ClientName;
        select.innerHTML = "";
        clients.forEach((client, index) => {
            const option = document.createElement("option");
            option.value = client;
            option.textContent = client;
            if (index === 0) option.selected = true;
            select.appendChild(option);
        });
        return clients[0] || null;
    }

    // 🔹 Client dropdown → load schedules/tests
    ClientName.addEventListener("change", async function () {
        await loadClientData(this.value);
    });

    // 🔹 On Client Change → Load Tests + Schedules
    async function loadClientData(client) {
        if (!client) {
            tableSection.style.display = "none";
            tableBody.innerHTML = "";
            return;
        }
        try {
            resetForm();
            await loadTestsByClient(client);
            await loadClientSchedules(client);
        } catch (err) {
            console.error("Error loading tests:", err);
        }
    }

    // 🔹 Load tests by client
    async function loadTestsByClient(client) {
        const res = await fetch(`/api/DashboardApi/GetTestsByClient?clientName=${encodeURIComponent(client)}`);
        const tests = await res.json();
        testsDropdown.innerHTML = `<option value="All">All</option>`;
        tests.forEach(t => {
            const opt = document.createElement("option");
            opt.value = t.testCaseName;
            opt.textContent = t.testCaseName;
            testsDropdown.appendChild(opt);
        });
    }

    // 🔹 Load schedules into table
    async function loadClientSchedules(client) {
        tableSection.style.display = "block";
        tableBody.innerHTML = `<tr><td colspan="7" class="text-center text-muted">Loading...</td></tr>`;
        try {
            const res = await fetch(`/api/DashboardApi/GetSchedulesByClient?clientName=${encodeURIComponent(client)}`);
            const data = await res.json();
            renderClientTable(data);
        } catch (err) {
            console.error(err);
            tableBody.innerHTML = `<tr><td colspan="7" class="text-center text-danger">Error loading schedules</td></tr>`;
        }
    }

    // 🔹 Submit form
    document.getElementById("scheduleForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        let selectedTests = Array.from(testsDropdown.selectedOptions).map(opt => opt.value);
        if (selectedTests.includes("All")) {
            selectedTests = Array.from(testsDropdown.options)
                .map(opt => opt.value)
                .filter(v => v !== "All");
        }

        const formData = new FormData(this);

        const payload = {
            id: editingId || 0,
            clientName: ClientName.value,
            testsToBeRun: selectedTests,
            fromDate: formData.get("FromDate") || null,
            toDate: formData.get("ToDate") || null,
            dayOfWeek: dayAllCheckbox.checked
                ? ["All"]
                : Array.from(dayOptions).filter(o => o.checked).map(o => o.value),
            atTime: formData.get("AtTime")
        };

        try {
            const res = await fetch("/api/DashboardApi/SaveSchedule", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            let result;
            const text = await res.text();
            try { result = JSON.parse(text); }
            catch { result = { success: false, message: text || `HTTP ${res.status}` }; }

            document.getElementById("statusModalTitle").innerText = result.success ? "Success" : "Error";
            document.getElementById("statusModalBody").innerText = result.message;
            new bootstrap.Modal(document.getElementById("statusModal")).show();

            if (result.success) loadClientSchedules(payload.clientName);
        } catch (err) {
            console.error(err);
            document.getElementById("statusModalTitle").innerText = "Error";
            document.getElementById("statusModalBody").innerText = "Failed to save schedule.";
            new bootstrap.Modal(document.getElementById("statusModal")).show();
        }

        resetForm();
    });

    // 🔹 Deactivate schedule
    deactivateBtn.addEventListener("click", async () => {
        if (!editingId) return;
        try {
            const res = await fetch(`/api/DashboardApi/DeactivateSchedule?id=${editingId}`, { method: "POST" });
            const result = await res.json();
            document.getElementById("statusModalTitle").innerText = result.success ? "Success" : "Error";
            document.getElementById("statusModalBody").innerText = result.message;
            new bootstrap.Modal(document.getElementById("statusModal")).show();

            if (result.success) {
                loadClientSchedules(ClientName.value);
                resetForm();
            }
        } catch (err) {
            console.error(err);
        }
    });

    // 🔹 Day-of-week checkbox logic
    dayAllCheckbox.addEventListener("change", () => {
        const checked = dayAllCheckbox.checked;
        dayOptions.forEach(opt => { opt.checked = false; opt.disabled = checked; });
    });

    dayOptions.forEach(opt => {
        opt.addEventListener("change", () => {
            if (Array.from(dayOptions).some(d => d.checked)) dayAllCheckbox.checked = false;
        });
    });

    // 🔹 Tests dropdown "All" logic
    testsDropdown.addEventListener("change", () => {
        const selected = Array.from(testsDropdown.selectedOptions).map(o => o.value);
        if (selected.includes("All") && selected.length > 1) {
            Array.from(testsDropdown.options).forEach(o => o.selected = o.value === "All");
        }
        else if (!selected.includes("All")) {
            Array.from(testsDropdown.options).forEach(o => { if (o.value === "All") o.selected = false; });
        }
    });

    // 🔹 Render client table with row click
    let clientScheduleData = [];
    let currentPage = 1;
    let pageSize = parseInt(document.getElementById("pageSize").value) || 10;

    function renderClientTable(data) {
        clientScheduleData = data || [];
        tableSection.style.display = "block";

        const total = clientScheduleData.length;
        const start = (currentPage - 1) * pageSize;
        const end = Math.min(start + pageSize, total);
        const pageData = clientScheduleData.slice(start, end);

        tableBody.innerHTML = pageData.map((row, index) => `
            <tr data-id="${row.id}">
                <td>${start + index + 1}</td>
                <td>${row.testsToBeRun}</td>
                <td>${formatDateTime(row.fromDate)}</td>
                <td>${formatDateTime(row.toDate)}</td>
                <td>${row.daysOfWeek ?? ""}</td>
                <td>${row.atTime ?? ""}</td>
                <td>${formatDateTime(row.lastRunTime)}</td>
            </tr>
        `).join('');

        attachRowClickEvents();
        setupPaginationControls(clientScheduleData);

        $("#pageInfo").text(`Showing ${start + 1} to ${end} of ${total}`);
        $("#firstPage, #prevPage").prop("disabled", currentPage === 1);
        $("#nextPage, #lastPage").prop("disabled", end >= total);
    }

    // 🔹 Table row click → fill form
    function attachRowClickEvents() {
        Array.from(tableBody.querySelectorAll("tr")).forEach(tr => {
            tr.addEventListener("click", () => {
                Array.from(tableBody.querySelectorAll("tr")).forEach(r => r.classList.remove("table-active-row"));
                tr.classList.add("table-active-row");
                const id = tr.dataset.id;
                const row = clientScheduleData.find(r => r.id == id);
                if (row) fillFormForEdit(row);
            });
        });
    }

    function fillFormForEdit(row) {
        editingId = row.id;
        window.scrollTo({ top: 0, behavior: "smooth" });

        ClientName.value = row.clientName;
        document.getElementById("FromDate").value = row.fromDate ? row.fromDate.split("T")[0] : "";
        document.getElementById("ToDate").value = row.toDate ? row.toDate.split("T")[0] : "";
        document.getElementById("AtTime").value = row.atTime || "";

        // Tests
        const selectedTests = row.testsToBeRun.split(",");
        Array.from(testsDropdown.options).forEach(o => o.selected = selectedTests.includes(o.value));
        // Days of Week (edit mode fill)
        if (row.daysOfWeek && row.daysOfWeek.split(",").includes("ALL")) {
            console.log(row.daysOfWeek);  // ✅ fixed console.log
            dayAllCheckbox.checked = true;   // check the All box
            dayOptions.forEach(opt => {
                opt.checked = false;         // leave Mon–Sun unchecked
                opt.disabled = false;        // keep them enabled
            });
        } else {
            console.log(row.daysOfWeek);  // ✅ fixed console.log
            dayAllCheckbox.checked = false;
            dayOptions.forEach(opt => {
                opt.checked = row.daysOfWeek?.split(",").includes(opt.value);
                opt.disabled = false;
            });
        }
        deactivateBtn.style.display = "inline-block";
    }

    // 🔹 Pagination controls
    function setupPaginationControls(data) {
        $("#firstPage").off("click").on("click", () => { currentPage = 1; renderClientTable(data); });
        $("#prevPage").off("click").on("click", () => { if (currentPage > 1) { currentPage--; renderClientTable(data); } });
        $("#nextPage").off("click").on("click", () => { if (currentPage * pageSize < data.length) { currentPage++; renderClientTable(data); } });
        $("#lastPage").off("click").on("click", () => { currentPage = Math.ceil(data.length / pageSize); renderClientTable(data); });

        $("#pageSize").off("change").on("change", function () {
            pageSize = parseInt($(this).val());
            currentPage = 1;
            renderClientTable(data);
        });
        window.scrollTo(0, document.body.scrollHeight);
    }

    // 🔹 Initial load
    loadClients().then(client => {
        if (client) {
            resetForm();
            loadTestsByClient(client);
            loadClientSchedules(client);
        }
    });

    resetBtn.addEventListener("click", resetForm);

    // 🔹 Date formatter
    function formatDateTime(dateString) {
        if (!dateString) return "";
        const match = dateString.match(/^(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2}:\d{2})/);
        return match ? `${match[1]} ${match[2]}` : dateString;
    }

</script>