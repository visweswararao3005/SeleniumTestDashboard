@{
    ViewData["Title"] = "Scheduler";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<div class="container py-4">

    <!-- 🔹 Header -->
    <div class="sticky-header d-flex justify-content-between align-items-center mb-3">

        <h2 class="mb-0">OPAL - Test Scheduler Dashboard</h2>

        <select id="ClientName" name="ClientName" class="form-select form-select-sm" style="width:160px" required> </select>
       
        <a href="@Url.Action("Index", "Dashboard")" class="btn btn-outline-secondary">
            <i class="bi bi-speedometer2"></i> Dashboard
        </a>
    </div>

    <!-- 🔹 Scheduler Form -->
    <div class="card shadow-lg border-0 rounded-4">
        <div class="card-body p-4">
            <form id="scheduleForm">

                <div class="row g-3 mb-3">

                    <div class="col-md-6">
                        <label class="form-label fw-semibold required">Tests To Be Run</label>
                        <select id="TestsToBeRun" name="TestsToBeRun" class="form-select shadow-sm" multiple required>
                            <option value="All">All</option>
                        </select>
                        <div class="form-text">Hold CTRL (or CMD on Mac) to select multiple tests.</div>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label fw-semibold">From Date</label>
                        <input type="text" id="FromDate" name="FromDate" class="form-control datepicker shadow-sm" placeholder="YYYY-MM-DD" />
                    
                        <label class="form-label fw-semibold">To Date</label>
                        <input type="text" id="ToDate" name="ToDate" class="form-control datepicker shadow-sm" placeholder="YYYY-MM-DD" />
                    </div>
                </div>

                <div class="row g-3 mb-5">
                    <div class="col-md-6">
                        <label class="form-label fw-semibold">Day(s) of Week</label>
                        <select id="DayOfWeek" name="DayOfWeek" class="form-select shadow-sm" multiple>
                            <option>Monday</option>
                            <option>Tuesday</option>
                            <option>Wednesday</option>
                            <option>Thursday</option>
                            <option>Friday</option>
                            <option>Saturday</option>
                            <option>Sunday</option>
                        </select>
                        <div class="form-text">Hold CTRL (or CMD on Mac) to select multiple days.</div>
                    </div>

                    <div class="col-md-6">
                        <!-- 🔹 Days + Time -->
                        <label class="form-label fw-semibold required">At Time</label>
                        <input type="text" id="AtTime" name="AtTime" class="form-control shadow-sm" required />
                        <!-- 🔹 Actions -->
                        <div class="row mt-3">
                            <div class="col d-flex justify-content-end gap-2">
                                <button type="button" id="resetBtn" class="btn btn-outline-secondary">
                                    <i class="bi bi-x-circle"></i> Reset
                                </button>
                                <button type="button" id="deactivateBtn" class="btn btn-danger" style="display:none;">
                                    <i class="bi bi-slash-circle"></i> Deactivate
                                </button>
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-save"></i> Save Schedule
                                </button>
                            </div>
                        </div>

                    </div>
                </div>

            </form>
        </div>
    </div>

    <!-- 🔹 Schedule Table -->
    <div class="card p-3 mt-4">
        <div id="clientTableSection" class="mt-4" style="display: none;">

            <h5 class="mb-3">Active Schedulers</h5>

            <div class="table-responsive" style="overflow: visible;">
                <table class="table table-bordered table-striped shadow-sm mt-2" id="clientTable" style="table-layout: fixed; width: 100%;">
                    <thead class="table-primary">
                        <tr>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 5%;">Sl.No</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 33%;">Tests To Be Run</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 14%;">From Date</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 14%;">To Date</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 15%;">Days Of Week</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 7%;">At Time</th>
                            <th style="position: sticky; top: 0; background: #cfe2ff; z-index: 1; width: 14%;">Last Run Time</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            </div>

            <!-- Pagination (always below table, no scrolling needed) -->
            <div class="d-flex align-items-center mt-2 border-top pt-2">

                <!-- Pagination Buttons (30%) -->
                <div class="flex-grow-0 flex-shrink-0" style="flex-basis:30%;">
                    <div class="btn-group">
                        <button id="firstPage" class="btn btn-sm btn-outline-secondary">|⯇</button>
                        <button id="prevPage" class="btn btn-sm btn-outline-secondary">⯇</button>
                        <button id="nextPage" class="btn btn-sm btn-outline-secondary">⯈</button>
                        <button id="lastPage" class="btn btn-sm btn-outline-secondary">⯈|</button>
                    </div>
                </div>

                <!-- Page Size (30%) -->
                <div class="text-center flex-grow-0 flex-shrink-0" style="flex-basis:30%;">
                    <label for="pageSize" class="me-1">Page size:</label>
                    <select id="pageSize" class="form-select form-select-sm d-inline-block" style="width: auto;">
                        <option value="5">5</option>
                        <option value="10" selected>10</option>
                        <option value="20">20</option>
                        <option value="30">30</option>
                    </select>
                </div>

                <!-- Page Info (40%) -->
                <div class="text-end flex-grow-0 flex-shrink-0" style="flex-basis:40%;">
                    <span id="pageInfo" class="mx-2 align-self-center small text-muted"></span>
                </div>
            </div>
        </div>
    </div>

</div>

<div class="modal fade" id="statusModal" tabindex="-1" aria-hidden="true">
    <!-- 🔹 Modal -->
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="statusModalTitle"></h5>
            </div>
            <div class="modal-body" id="statusModalBody"></div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
            </div>
        </div>
    </div>
</div>

<script>

    let editingId = null; // track current schedule being edited
    const clients = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Clients ?? new List<string>()));

    const ClientName = document.getElementById("ClientName");
    const resetBtn = document.getElementById("resetBtn");
    resetBtn.addEventListener("click", resetForm);
    const deactivateBtn = document.getElementById("deactivateBtn");

    // 🔹 Init Pickers
    flatpickr(".datepicker", { dateFormat: "Y-m-d" });
    flatpickr("#AtTime", {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
        time_24hr: true
    });

    const testsDropdown = document.getElementById("TestsToBeRun");
    const tableSection = document.getElementById("clientTableSection");
    const tableBody = document.querySelector("#clientTable tbody");

    // 🔹 Load clients and default schedules
    loadClients().then(defaultClient => {
        if (defaultClient) {
            loadTestsByClient(defaultClient);
            loadClientSchedules(defaultClient);
        }
    });

    // 🔹 On Client Change → Load Tests + Schedules
    ClientName.addEventListener("change", async function () {
        const client = this.value;
        testsDropdown.innerHTML = `<option value="All">All</option>`;

        if (!client) {
            tableSection.style.display = "none";
            tableBody.innerHTML = "";
            return;
        }

        try {
            resetForm();
            await loadTestsByClient(client);
            loadClientSchedules(client);
        } catch (err) {
            console.error("Error loading tests:", err);
        }
    });

    // 🔹 Load tests by client
    async function loadTestsByClient(client) {
        const testRes = await fetch(`/api/DashboardApi/GetTestsByClient?clientName=${encodeURIComponent(client)}`);
        const tests = await testRes.json();

        tests.forEach(t => {
            const opt = document.createElement("option");
            opt.value = t.testCaseName;
            opt.textContent = t.testCaseName;
            testsDropdown.appendChild(opt);
        });
    }

    // 🔹 Load schedules into table
    async function loadClientSchedules(client) {
        tableSection.style.display = "block";
        tableBody.innerHTML = `<tr><td colspan="7" class="text-center text-muted">Loading...</td></tr>`;

        try {
            const res = await fetch(`/api/DashboardApi/GetSchedulesByClient?clientName=${encodeURIComponent(client)}`);
            const data = await res.json();

            renderClientTable(data);
        } catch (err) {
            console.error(err);
            tableBody.innerHTML = `<tr><td colspan="7" class="text-center text-danger">Error loading schedules</td></tr>`;
        }
    }

    // 🔹 Submit Form → Save Schedule
    document.getElementById("scheduleForm").addEventListener("submit", async function (e) {
        e.preventDefault();

        let selectedTests = Array.from(testsDropdown.selectedOptions).map(opt => opt.value);

        // If "All" is selected, include all tests except the "All" option itself
        if (selectedTests.includes("All")) {
            selectedTests = Array.from(testsDropdown.options)
                .map(opt => opt.value)
                .filter(v => v !== "All");
        }

        const formData = new FormData(this);
        const atTime = formData.get("AtTime");

        if (!atTime) {
            const atInput = document.getElementById("AtTime");
            atInput.classList.add("is-invalid");
            document.getElementById("statusModalTitle").innerText = "Validation Error";
            document.getElementById("statusModalBody").innerText = "AtTime is required.";
            new bootstrap.Modal(document.getElementById("statusModal")).show();
            return;
        } else {
            document.getElementById("AtTime").classList.remove("is-invalid");
        }

        const testToBeRun = formData.get("TestsToBeRun");
        if (!testToBeRun) {
            const atInput = document.getElementById("TestsToBeRun");
            atInput.classList.add("is-invalid");
            document.getElementById("statusModalTitle").innerText = "Validation Error";
            document.getElementById("statusModalBody").innerText = "Test To Be Run is required.";
            new bootstrap.Modal(document.getElementById("statusModal")).show();
            return;
        } else {
            document.getElementById("TestsToBeRun").classList.remove("is-invalid");
        }

        const payload = {
            id: editingId || 0,
            clientName: ClientName.value,
            testsToBeRun: selectedTests,
            fromDate: formData.get("FromDate") || null,
            toDate: formData.get("ToDate") || null,
            dayOfWeek: Array.from(document.querySelector("select[name='DayOfWeek']").selectedOptions).map(opt => opt.value) || null,
            atTime: formData.get("AtTime")
        };

        try {
            const res = await fetch("/api/DashboardApi/SaveSchedule", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload)
            });

            let result;
            const text = await res.text();
            try { result = JSON.parse(text); }
            catch { result = { success: false, message: text || `HTTP ${res.status}` }; }

            document.getElementById("statusModalTitle").innerText = result.success ? "Success" : "Error";
            document.getElementById("statusModalBody").innerText = result.message;
            new bootstrap.Modal(document.getElementById("statusModal")).show();

            if (result.success) loadClientSchedules(payload.clientName);
        } catch (err) {
            console.error("Error saving schedule:", err);
            document.getElementById("statusModalTitle").innerText = "Error";
            document.getElementById("statusModalBody").innerText = "Failed to save schedule.";
            new bootstrap.Modal(document.getElementById("statusModal")).show();
        }

        resetForm();
    });

    // 🔹 Reset form
    function resetForm() {
        editingId = null;
        Array.from(testsDropdown.options).forEach(opt => opt.selected = false);
        document.getElementById("FromDate").value = "";
        document.getElementById("ToDate").value = "";
        Array.from(document.getElementById("DayOfWeek").options).forEach(opt => opt.selected = false);
        document.getElementById("AtTime").value = "";
        deactivateBtn.style.display = "none";
    }

    // 🔹 Load clients into dropdown
    function loadClients() {
        return new Promise((resolve) => {
            const select = ClientName;
            select.innerHTML = "";

            clients.forEach((client, index) => {
                const option = document.createElement("option");
                option.value = client;
                option.textContent = client;
                if (index === 0) option.selected = true; // default first
                select.appendChild(option);
            });

            resolve(clients[0] || null); // return first client
        });
    }

    // 🔹 Deactivate action
    deactivateBtn.addEventListener("click", async () => {
        if (!editingId) return;
        try {
            const res = await fetch(`/api/DashboardApi/DeactivateSchedule?id=${editingId}`, { method: "POST" });
            const result = await res.json();

            document.getElementById("statusModalTitle").innerText = result.success ? "Success" : "Error";
            document.getElementById("statusModalBody").innerText = result.message;
            new bootstrap.Modal(document.getElementById("statusModal")).show();

            if (result.success) {
                loadClientSchedules(ClientName.value);
                resetForm();
            }
        } catch (err) {
            console.error("Error deactivating:", err);
        }
    });

    // 🔹 Date formatter
    function formatDateTime(dateString) {
        if (!dateString) return "";
        const match = dateString.match(/^(\d{4}-\d{2}-\d{2})[ T](\d{2}:\d{2}:\d{2})/);
        return match ? `${match[1]} ${match[2]}` : dateString;
    }

    // 🔹 Table rendering + pagination (unchanged)
    let clientScheduleData = [];
    let currentPage = 1;
    let pageSize = parseInt(document.getElementById("pageSize").value) || 10;

    function renderClientTable(data) {
        clientScheduleData = data || [];
        tableSection.style.display = "block";

        const total = clientScheduleData.length;
        const start = (currentPage - 1) * pageSize;
        const end = Math.min(start + pageSize, total);
        const pageData = clientScheduleData.slice(start, end);

        tableBody.innerHTML = pageData.map((row, index) => `
                <tr data-id="${row.id}">
                    <td>${start + index + 1}</td>
                    <td>${row.testsToBeRun}</td>
                    <td>${formatDateTime(row.fromDate)}</td>
                    <td>${formatDateTime(row.toDate)}</td>
                    <td>${row.daysOfWeek ?? ""}</td>
                    <td>${row.atTime ?? ""}</td>
                    <td>${formatDateTime(row.lastRunTime)}</td>
                </tr>
            `).join('');

        Array.from(tableBody.querySelectorAll("tr")).forEach(tr => {
            tr.addEventListener("click", () => {
                const id = tr.dataset.id;
                const row = clientScheduleData.find(r => r.id == id);
                if (!row) return;

                editingId = row.id;
                window.scrollTo({ top: 0, behavior: "smooth" });

                ClientName.value = row.clientName;
                document.getElementById("FromDate").value = row.fromDate ? row.fromDate.split("T")[0] : "";
                document.getElementById("ToDate").value = row.toDate ? row.toDate.split("T")[0] : "";
                document.getElementById("AtTime").value = row.atTime || "";

                Array.from(testsDropdown.options).forEach(opt => {
                    opt.selected = row.testsToBeRun.split(",").includes(opt.value);
                });

                Array.from(document.getElementById("DayOfWeek").options).forEach(opt => {
                    opt.selected = row.daysOfWeek?.split(",").includes(opt.value);
                });

                deactivateBtn.style.display = "inline-block";
            });
        });

        setupPaginationControls(clientScheduleData);
        $("#pageInfo").text(`Showing ${start + 1} to ${end} of ${total}`);
        $("#firstPage, #prevPage").prop("disabled", currentPage === 1);
        $("#nextPage, #lastPage").prop("disabled", end >= total);
    }

    function setupPaginationControls(clientScheduleData) {
        $("#firstPage").off("click").on("click", () => { currentPage = 1; renderClientTable(clientScheduleData); });
        $("#prevPage").off("click").on("click", () => { if (currentPage > 1) { currentPage--; renderClientTable(clientScheduleData); } });
        $("#nextPage").off("click").on("click", () => { if (currentPage * pageSize < clientScheduleData.length) { currentPage++; renderClientTable(clientScheduleData); } });
        $("#lastPage").off("click").on("click", () => { currentPage = Math.ceil(clientScheduleData.length / pageSize); renderClientTable(clientScheduleData); });

        $("#pageSize").off("change").on("change", function () {
            pageSize = parseInt($(this).val());
            currentPage = 1;
            renderClientTable(clientScheduleData);
        });
        window.scrollTo(0, document.body.scrollHeight);
    }

</script>