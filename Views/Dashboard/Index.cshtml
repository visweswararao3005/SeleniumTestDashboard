@{
    Layout = "_Layout"; // or set Layout = null;
    var client = ViewBag.Client as string ?? "";
}

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"><!-- Bootstrap 5 CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet"><!-- Bootstrap Icons -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns"></script>

<div class="container py-4">

    <div class="sticky-header d-flex justify-content-between align-items-center mb-3">
        <h2 class="mb-0">OPAL - Test Automation Dashboard</h2>
       
        @if (string.IsNullOrEmpty(client))
        {
            <select id="clientSelect" class="form-select form-select-sm" style="width:160px"></select>
        }
        else
        {
            <h4>@client</h4>
            <input type="hidden" id="clientSelect" value="@client" />
        }

        <div class="d-flex align-items-center gap-2">
            <input id="dateSelect" class="form-control form-control-sm" style="width:160px" placeholder="Select date" />
            <button id="refreshBtn" class="btn btn-primary btn-sm">Refresh</button>
        </div>
        <!-- 🔹 New Scheduler Button -->
        <a href=@Url.Action("Scheduler", "Dashboard") class="btn btn-outline-primary">
            <i class="bi bi-calendar-check"></i> Scheduler
        </a>
    </div>

    <!-- KPI Cards -->
    <div class="row g-3 mb-3">
        <!-- Left: Pie Chart (selected day) -->
        <div class="col-md-6">
            <div class="card p-3 h-100">
                <div class="d-flex justify-content-between align-items-center mb-2">
                    <div>
                        <strong>Pass / Fail</strong>
                        <div class="small-txt">Distribution for selected day</div>
                    </div>
                    <div class="small-txt">Updated: <span id="updatedAt">-</span></div>
                </div>
                <div class="chart-container">
                    <canvas id="pieStatus"></canvas>
                </div>
            </div>
        </div>

        <!-- Right: Stats (2 rows of 2 cards) -->
        <div class="col-md-6">
            <div class="row g-5">
                <!-- Top Left -->
                <div class="col-md-7">
                    <div class="card card-compact p-3 text-right h-100">
                        <div class="metric text-success" id="passCount">0</div>
                        <div class="metric text-danger mt-2" id="failCount">0</div>
                    </div>
                </div>

                <!-- Top Right -->
                <div class="col-md-5">
                    <div class="card card-compact p-3 text-center h-100">
                        <div class="metric" id="totalRuns">0</div>
                        <div class="sub">Total Runs (Selected Day)</div>
                        <div class="small-txt">
                            Pass = <span id="passPct" class="text-success">0%</span>
                        </div>
                    </div>
                </div>

                <!-- Bottom Left -->
                <div class="col-md-7">
                    <div class="card card-compact p-3 text-right h-100 bg-light">
                        <h5 class="text-center mb-3">All Time</h5>
                        <div class="metric text-success" id="overallPassCount">0</div>
                        <div class="metric text-danger mt-2" id="overallFailCount">0</div>
                    </div>
                </div>

                <!-- Bottom Right -->
                <div class="col-md-5">
                    <div class="card card-compact p-3 text-center h-100 bg-light">
                        <div class="metric" id="overallTotalRuns">0</div>
                        <div class="sub">Total Runs (All Time)</div>
                        <div class="small-txt">
                            Pass = <span id="overallPassPct" class="text-success">0%</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>

    <!-- Recent Runs -->
    <div class="row mt-3 mb-2">
        <div class="col-12">
            <div class="card p-3">
                <h5 class="mb-2">Recent Test Runs</h5>
                <div class="table-wrap">
                    <table class="table table-sm table-hover">
                        <thead class="table-light">
                            <tr><th>Sl.No</th><th>Time</th><th>TestCaseID</th><th>Screen</th><th>Test</th><th>Duration(sec)</th><th>Status</th></tr>
                        </thead>
                        <tbody id="recentRuns"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <!-- Charts -->
    <div class="row g-3 mt-1">
        <div class="col-lg-6">
            <div class="card p-3">
                <h5 class="mb-3">Top Executed Tests</h5>
                <div class="chart-container"><canvas id="barTests"></canvas></div>
            </div>
        </div>
        <div class="col-lg-6">
            <div class="card p-3">
                <h5 class="mb-3">Average Duration (last 14 days)</h5>
                <div class="chart-container"><canvas id="lineTrend"></canvas></div>
            </div>
        </div>
    </div>

    <!-- 🔹 Test History Section -->
    <div class="card p-3 mt-4">
        <h5 class="mb-3">Test Case History</h5>
        <div class="row g-3 align-items-end mb-3">
            <div class="col-md-3">
                <label for="historyTestId" class="form-label">Select TestID</label>
                <select id="historyTestId" class="form-select">
                    <option value="">All</option>
                </select>
            </div>
            <div class="col-md-3">
                <label for="ScreenId" class="form-label">Select Screen</label>
                <select id="ScreenId" class="form-select">
                    <option value="">All</option>
                </select>
            </div>
        </div>
       
        <div >
            <table class="table table-bordered table-hover">
                <thead class="table-light">
                    <tr>
                        <th>Sl.No</th>
                        <th>Time</th>
                        <th>TestCaseID</th>
                        <th>Screen</th>
                        <th>Test Name</th>
                        <th>Duration(sec)</th>
                        <th>Status</th>
                    </tr>
                </thead>
                <tbody id="testHistoryTable"></tbody>
            </table>
        </div>

        <!-- Pagination (always below table, no scrolling needed) -->
        <div class="d-flex align-items-center mt-2 border-top pt-2">

            <!-- Pagination Buttons (30%) -->
            <div class="flex-grow-0 flex-shrink-0" style="flex-basis:30%;">
                <div class="btn-group">
                    <button id="firstPage" class="btn btn-sm btn-outline-secondary">|⯇</button>
                    <button id="prevPage" class="btn btn-sm btn-outline-secondary">⯇</button>
                    <button id="nextPage" class="btn btn-sm btn-outline-secondary">⯈</button>
                    <button id="lastPage" class="btn btn-sm btn-outline-secondary">⯈|</button>
                </div>
            </div>

            <!-- Page Size (30%) -->
            <div class="text-center flex-grow-0 flex-shrink-0" style="flex-basis:30%;">
                <label for="pageSize" class="me-1">Page size:</label>
                <select id="pageSize" class="form-select form-select-sm d-inline-block" style="width: auto;">
                    <option value="5">5</option>
                    <option value="10" selected>10</option>
                    <option value="20">20</option>
                    <option value="30">30</option>
                </select>
            </div>

            <!-- Page Info (40%) -->
            <div class="text-end flex-grow-0 flex-shrink-0" style="flex-basis:40%;">
                <span id="pageInfo" class="mx-2 align-self-center small text-muted"></span>
            </div>
        </div>

    </div>

</div>

<!-- 🔄 Loading Overlay -->
<div id="loadingOverlay">
    <div class="spinner-border text-primary" role="status">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

<!-- Error Modal -->
<div class="modal fade" id="errorModal" tabindex="-1" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-danger">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title">Error</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="errorModalBody">
                <!-- Error message goes here -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" id="errorModalCloseBtn" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    const clients = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(ViewBag.Clients ?? new List<string>()));

    // Reload page when modal "Close" button is clicked
    document.getElementById('errorModalCloseBtn').addEventListener('click', () => {
        location.reload();
    });

    const api = {
        statusSummary: '/api/dashboardapi/status-summary',
        overallStatusSummary: '/api/dashboardapi/overall-status-summary',
        testsPerRun: '/api/dashboardapi/tests-per-run',
        durationTrend: '/api/dashboardapi/duration-trend',
        recentRuns: '/api/dashboardapi/recent-runs',
        testHistory: '/api/dashboardapi/test-history'
    };

    let pieChart, barChart, lineChart;

    function initCharts() {
        pieChart = new Chart(document.getElementById('pieStatus'), {
            type: 'pie',
            data: {
                labels: ['Pass', 'Fail'],
                datasets: [{ data: [0, 0], backgroundColor: ['#4CAF50', '#F44336'] }]
            }
        });

        barChart = new Chart(document.getElementById('barTests'), {
            type: 'bar',
            data: { labels: [], datasets: [{ label: 'Executions', data: [], backgroundColor: '#3b82f6' }] },
            options: {
                indexAxis: 'y',
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: { ticks: { align: 'start', crossAlign: 'near' } }
                }
            }
        });

        lineChart = new Chart(document.getElementById('lineTrend'), {
            type: 'line',
            data: { datasets: [{ label: 'Avg Duration (sec)', data: [], borderColor: '#10b981', tension: 0.3 }] },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        type: 'time',
                        time: { unit: 'day', tooltipFormat: 'yyyy-MM-dd' },
                        ticks: { autoSkip: true, maxRotation: 45, minRotation: 45 }
                    },
                    y: { beginAtZero: true }
                },
                plugins: {
                    tooltip: {
                        callbacks: {
                            label: function (context) {
                                const p = context.raw;
                                return [
                                    `Average Duration: ${p.y.toFixed(2)} sec`,
                                    `Total Duration: ${p.totalDuration?.toFixed(2) ?? 0} sec`,
                                    `Count: ${p.count ?? 0}`
                                ];
                            }
                        }
                    }
                }
            }
        });
    }

    // ⚡ Updated: loadAll waits for all loads to complete
    async function loadAll(date, client) {
        showLoader();
        $('#updatedAt').text(new Date().toLocaleString());

        try {
            const res = await fetch(`/api/DashboardApi/status-summary?client=${client}&date=${date}`);
            const data = await res.json();

            if (data.error) {
                showErrorModal(data.error);
                return;
            }

            await Promise.all([
                loadStatus(date, client),
                loadOverallStatus(client),
                loadTestsPerRun(date, client),
                loadDurationTrend(client),
                loadRecentRuns(date, client),
                loadTestHistory(date, $("#historyTestId").val(), client, $("#ScreenId").val())
            ]);

        } catch (err) {
            showErrorModal("An unexpected error occurred.");
        } finally {
            hideLoader();
        }
    }

    // ⚡ Updated: Return promises from all load functions
    function loadStatus(date, client) {
        let query = [];
        if (date) query.push("date=" + encodeURIComponent(date));
        if (client) query.push("client=" + encodeURIComponent(client));

        return $.getJSON(api.statusSummary + (query.length ? "?" + query.join("&") : ""))
            .then(data => {
                $('#passCount').text("Pass - " + data.pass);
                $('#failCount').text("Fail - " + data.fail);
                const total = data.pass + data.fail;
                $('#totalRuns').text(total);
                $('#passPct').text(total ? Math.round(100 * data.pass / total) + '%' : '0%');
                pieChart.data.datasets[0].data = [data.pass, data.fail];
                pieChart.update();
            });
    }

    function loadOverallStatus(client) {
        let query = [];
        if (client) query.push("client=" + encodeURIComponent(client));

        return $.getJSON(api.overallStatusSummary + (query.length ? "?" + query.join("&") : ""))
            .then(overall => {
                $('#overallPassCount').text("Pass - " + overall.pass);
                $('#overallFailCount').text("Fail - " + overall.fail);
                const total = overall.pass + overall.fail;
                $('#overallTotalRuns').text(total);
                $('#overallPassPct').text(total ? Math.round(100 * overall.pass / total) + '%' : '0%');
            });
    }

    function loadTestsPerRun(date, client) {
        let query = [];
        if (date) query.push("date=" + encodeURIComponent(date));
        if (client) query.push("client=" + encodeURIComponent(client));

        return $.getJSON(api.testsPerRun + (query.length ? "?" + query.join("&") : ""))
            .then(data => {
                const top = data.slice(0, 20);
                barChart.data.labels = top.map(x => x.testName);
                barChart.data.datasets[0].data = top.map(x => x.count);
                barChart.update();
            });
    }

    function loadDurationTrend(client) {
        let query = [];
        if (client) query.push("client=" + encodeURIComponent(client));
        query.push("days=14");

        return $.getJSON(api.durationTrend + (query.length ? "?" + query.join("&") : ""))
            .then(data => {
                lineChart.data.datasets[0].data = data.map(x => ({
                    x: new Date(x.date),
                    y: parseFloat(x.avgDuration),
                    totalDuration: parseFloat(x.totalDuration),
                    count: x.count
                }));
                lineChart.update();
            });
    }

    function loadRecentRuns(date, client) {
        let query = [];
        if (date) query.push("date=" + encodeURIComponent(date));
        if (client) query.push("client=" + encodeURIComponent(client));

        return $.getJSON(api.recentRuns + (query.length ? "?" + query.join("&") : ""))
            .then(data => {
                $('#recentRuns').html(data.map((r, index) => `
                        <tr>
                            <td>${index + 1}</td>
                            <td>${formatDate(r.startTime)}</td>
                            <td>${r.testID || ''}</td>
                            <td>${r.screen}</td>
                            <td>${r.testName}</td>
                            <td>${r.durationSeconds}</td>
                            <td><span class="badge ${r.status === 'Pass' ? 'bg-success' : 'bg-danger'}">${r.status}</span></td>
                        </tr>`
                ).join(''));
            });
    }

    function loadTestHistory(date, testId, client, screen) {
        let query = [];
        if (date) query.push("date=" + encodeURIComponent(date));
        if (testId) query.push("testId=" + encodeURIComponent(testId));
        if (client) query.push("client=" + encodeURIComponent(client));
        if (screen) query.push("screen=" + encodeURIComponent(screen));

        return $.getJSON(api.testHistory + (query.length ? "?" + query.join("&") : ""))
            .then(data => {
                if ($("#historyTestId option").length <= 1) {
                    $("#historyTestId").empty().append('<option value="">All</option>');
                    [...new Set(data.map(d => d.testID))].forEach(id => {
                        $("#historyTestId").append(`<option value="${id}">${id}</option>`);
                    });
                }
                if ($("#ScreenId option").length <= 1) {
                    $("#ScreenId").empty().append('<option value="">All</option>');
                    [...new Set(data.map(d => d.screen))].forEach(s => {
                        if (s) $("#ScreenId").append(`<option value="${s}">${s}</option>`);
                    });
                }
                testHistoryData = data;
                currentPage = 1;
                renderTestHistoryTable();
                setupPaginationControls();
            });
    }

    // helpers
    function formatDate(dt) {
        const d = new Date(dt);
        const pad = (n) => n.toString().padStart(2, '0');
        return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
    }

    function showLoader() { $("#loadingOverlay").show(); }

    function hideLoader() { $("#loadingOverlay").hide(); }

    // Pagination + dropdown setup code ...
    let testHistoryData = []; // global store
    let currentPage = 1;
    let pageSize = 10;

    function renderTestHistoryTable() {
        const total = testHistoryData.length;
        const start = (currentPage - 1) * pageSize;
        const end = Math.min(start + pageSize, total);
        const pageData = testHistoryData.slice(start, end);

        // Fill table
        $("#testHistoryTable").html(pageData.map((item, index) => `
            <tr>
                <td>${start + index + 1}</td>
                <td>${(() => {
                const d = new Date(item.startTime);
                const pad = (n) => n.toString().padStart(2, '0');
                return `${d.getFullYear()}-${pad(d.getMonth() + 1)}-${pad(d.getDate())} ${pad(d.getHours())}:${pad(d.getMinutes())}:${pad(d.getSeconds())}`;
            })()}</td>
                <td>${item.testID}</td>
                <td>${item.screen}</td>
                <td>${item.testName}</td>
                <td>${item.duration}</td>
                <td>
                    <span class="badge ${item.status === 'Pass' ? 'bg-success' : 'bg-danger'}">
                        ${item.status}
                    </span>
                </td>
            </tr>`
        ).join(''));

        // Update footer info
        $("#pageInfo").text(`Showing ${start + 1} to ${end} of ${total}`);

        // Enable/disable buttons
        $("#firstPage, #prevPage").prop("disabled", currentPage === 1);
        $("#nextPage, #lastPage").prop("disabled", end >= total);
    }

    function setupPaginationControls() {
        $("#firstPage").off("click").on("click", () => { currentPage = 1; renderTestHistoryTable(); window.scrollTo(0, document.body.scrollHeight); }); /* window.scrollTo(0, document.body.scrollHeight); */
        $("#prevPage").off("click").on("click", () => { if (currentPage > 1) { currentPage--; renderTestHistoryTable(); } window.scrollTo(0, document.body.scrollHeight); });
        $("#nextPage").off("click").on("click", () => { if (currentPage * pageSize < testHistoryData.length) { currentPage++; renderTestHistoryTable(); } window.scrollTo(0, document.body.scrollHeight); });
        $("#lastPage").off("click").on("click", () => { currentPage = Math.ceil(testHistoryData.length / pageSize); renderTestHistoryTable(); window.scrollTo(0, document.body.scrollHeight); });

        $("#pageSize").off("change").on("change", function () {
            pageSize = parseInt($(this).val());
            currentPage = 1; // reset to first page
            renderTestHistoryTable();
            window.scrollTo(0, document.body.scrollHeight);
        });
    }

    function loadClients() {
        return new Promise((resolve) => {
            const select = document.getElementById("clientSelect");
            select.innerHTML = "";

            clients.forEach((client, index) => {
                const option = document.createElement("option");
                option.value = client;
                option.textContent = client;

                if (index === 0) { // ✅ select the first as default
                    option.selected = true;
                }

                select.appendChild(option);
            });

            resolve(clients[0] || null); // ✅ first client as default
        });
    }

    function loadScreens() {
        return fetch('/screens.json')   // make sure screens.json is in wwwroot
            .then(response => response.json())
            .then(data => {
                const select = document.getElementById("ScreenId");
                select.innerHTML = '<option value="">All</option>'; // always add "All"

                Object.entries(data).forEach(([key, value]) => {
                    const option = document.createElement("option");
                    option.value = value;   // e.g. "Login"
                    option.textContent = value; // e.g. "Login"
                    select.appendChild(option);
                });
            })
            .catch(err => console.error("Error loading screens.json:", err));
    }

    function showErrorModal(message) {
        const modalEl = document.getElementById('errorModal');
        const modalBody = document.getElementById('errorModalBody');
        modalBody.textContent = message;

        const modal = new bootstrap.Modal(modalEl);
        modal.show();
    }

    $(function () {  
        // 🔹 Client dropdown change → reload all with current date
        $('#clientSelect').on('change', function () {

            const client = $(this).val();
            const date = $('#dateSelect').val();

            // 🔹 Scroll to top
            window.scrollTo({ top: 0, behavior: "smooth" });
            // 🔹 Clear History dropdown
            $("#historyTestId").empty().append('<option value="">All</option>');
            $("#ScreenId").empty().append('<option value="">All</option>');
            loadAll(date, client); // 🔹 pass both
        });

        // Top date picker
        flatpickr('#dateSelect', {
            dateFormat: 'Y-m-d',
            defaultDate: new Date(),
            onChange: (d, str) => {
                const client = $('#clientSelect').val();
                // 🔹 Scroll to top
                window.scrollTo({ top: 0, behavior: "smooth" });
                // 🔹 Clear History dropdown
                $("#historyTestId").empty().append('<option value="">All</option>');
                $("#ScreenId").empty().append('<option value="">All</option>');
                loadAll(str, client); // 🔹 pass both date + client
            }
        });

        // Refresh button → reload all
        $('#refreshBtn').click(() => {
            const date = $('#dateSelect').val();
            const client = $('#clientSelect').val();

            // 🔹 Scroll to top 
            window.scrollTo({ top: 0, behavior: "smooth" });

            // 🔹 Reset dropdowns back to "All"
            $("#historyTestId").val("");
            $("#ScreenId").val("");

            loadAll(date, client); // 🔹 pass both date + client
        });

        // History TestID dropdown change → filter table
        $('#historyTestId').on('change', function () {
            const date = $('#dateSelect').val();
            const selectedId = $(this).val();
            const client = $('#clientSelect').val();
            const screen = $('#ScreenId').val();
            loadTestHistory(date, selectedId, client, screen);
        });

        $('#ScreenId').on('change', function () {
            const date = $('#dateSelect').val();
            const client = $('#clientSelect').val();
            const selectedId = $('#historyTestId').val();
            const screen = $(this).val();
            loadTestHistory(date, selectedId, client, screen);
        });

        // Initialize
        initCharts();
        const today = new Date().toISOString().split('T')[0];

        loadClients().then(defaultClient => {
            if (defaultClient) {
                loadAll(today, defaultClient);
            }
        });
    });

</script>
